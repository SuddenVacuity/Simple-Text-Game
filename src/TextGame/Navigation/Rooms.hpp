#ifndef TEXTGAME_NAVIGATION_ROOMS_HPP
#define TEXTGAME_NAVIGATION_ROOMS_HPP 
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
)				name
)					use
)
)				variables
)					origin
)
)				return:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
#include <TextGame/Navigation/Rooms/testRoom.hpp>
   
namespace TextGame
{
struct testRoom2
{
	bool roomVisited;
	int roomEncounterRate = 0;
	std::string roomString[10] =
	{
		"[test roomString[0]]",
		"This is the Secondary Test Room",
		"Testing Room",
		"This is a room is just like the other.",
		"Only with differences."
	};

	static const int roomRows = 16;
	static const int roomColumns = 16;
	int roomObject[roomRows][roomColumns] =
	{   //1		2	  3		4	  5		6	  7		8		
		{ 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 },  // 1
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 2
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 3
		{ 001 , 000 , 000 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 000 , 000 , 001 },  // 4
		{ 001 , 000 , 000 , 001 , 000 , 001 , 000 , 000 , 000 , 000 , 001 , 000 , 001 , 000 , 000 , 001 },  // 5
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 6
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 7
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 8
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 9
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 10
		{ 001 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 001 },  // 11
		{ 001 , 000 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 000 , 001 },  // 12
		{ 001 , 000 , 000 , 000 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 000 , 000 , 000 , 001 },  // 13
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 14
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 15
		{ 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 }   // 16
	};

	int roomState[roomRows][roomColumns] =
	{   //1		2	  3		4	  5		6	  7		8		
		{ 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 },  // 1
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 2
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 3
		{ 001 , 000 , 000 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 000 , 000 , 001 },  // 4
		{ 001 , 000 , 000 , 001 , 000 , 001 , 000 , 000 , 000 , 000 , 001 , 000 , 001 , 000 , 000 , 001 },  // 5
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 6
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 7
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 8
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 9
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 10
		{ 001 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 001 },  // 11
		{ 001 , 000 , 000 , 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 , 000 , 000 , 001 },  // 12
		{ 001 , 000 , 000 , 000 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 000 , 000 , 000 , 001 },  // 13
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 14
		{ 001 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 000 , 001 },  // 15
		{ 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 , 001 }   // 16
	};

	//================================================================================
	//================================================================================
	~testRoom2();

	std::string returnString(int stringNum);
	int* returnSize();
	int returnState(int* location);
	int** returnData();
};




} // end TextGame

#endif

